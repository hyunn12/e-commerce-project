/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * 이커머스 플랫폼 API
 * 쇼핑·주문·결제 기능을 제공하는 이커머스 플랫폼 API
 */
// @ts-ignore
import { URL } from "https://jslib.k6.io/url/1.0.0/index.js";

import http from "k6/http";
import type { Params, Response } from "k6/http";

import type {
  ChargeHeaders,
  ComLoopersInterfacesApiApiResponseComLoopersInterfacesApiPointPointV1DtoPointResponse,
  ComLoopersInterfacesApiPointPointV1DtoChargeRequest,
  GetPointHeaders,
} from "./api.schemas";

/**
 * This is the base client to use for interacting with the API.
 */
export class PointV1ApiClient {
  private cleanBaseUrl: string;
  private commonRequestParameters: Params;

  constructor(clientOptions: {
    baseUrl: string;
    commonRequestParameters?: Params;
  }) {
    this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, "");

    this.commonRequestParameters = clientOptions.commonRequestParameters || {};
  }

  /**
   * 사용자의 포인트를 주어진 금액만큼 충전
   * @summary 포인트 충전
   */
  charge(
    comLoopersInterfacesApiPointPointV1DtoChargeRequest: ComLoopersInterfacesApiPointPointV1DtoChargeRequest,
    headers: ChargeHeaders,
    requestParameters?: Params,
  ): {
    response: Response;
    data: ComLoopersInterfacesApiApiResponseComLoopersInterfacesApiPointPointV1DtoPointResponse;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/v1/points/charge`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(comLoopersInterfacesApiPointPointV1DtoChargeRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
          // In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
          ...Object.fromEntries(
            Object.entries(headers || {}).map(([key, value]) => [
              key,
              String(value),
            ]),
          ),
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }
  /**
   * 회원 ID 로 보유 포인트 조회
   * @summary 포인트 조회
   */
  getPoint(
    headers: GetPointHeaders,
    requestParameters?: Params,
  ): {
    response: Response;
    data: ComLoopersInterfacesApiApiResponseComLoopersInterfacesApiPointPointV1DtoPointResponse;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/v1/points`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request("GET", url.toString(), undefined, {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        // In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
        ...Object.fromEntries(
          Object.entries(headers || {}).map(([key, value]) => [
            key,
            String(value),
          ]),
        ),
      },
    });
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * Merges the provided request parameters with default parameters for the client.
   *
   * @param {Params} requestParameters - The parameters provided specifically for the request
   * @param {Params} commonRequestParameters - Common parameters for all requests
   * @returns {Params} - The merged parameters
   */
  private _mergeRequestParameters(
    requestParameters?: Params,
    commonRequestParameters?: Params,
  ): Params {
    return {
      ...commonRequestParameters, // Default to common parameters
      ...requestParameters, // Override with request-specific parameters
      headers: {
        ...(commonRequestParameters?.headers || {}), // Ensure headers are defined
        ...(requestParameters?.headers || {}),
      },
      cookies: {
        ...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
        ...(requestParameters?.cookies || {}),
      },
      tags: {
        ...(commonRequestParameters?.tags || {}), // Ensure tags are defined
        ...(requestParameters?.tags || {}),
      },
    };
  }
}
